services:
  postgres:
    build: ./db_service
    image: postgres-database
    container_name: ${PG_CONTAINER_NAME}
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
       - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: ./api_service/Dockerfile
    image: api-service  
    container_name: api
    ports:
      - "${API_PORT}:8080"
    depends_on:
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  inventory1:
    build:
      context: .
      dockerfile: ./consumer_service/Dockerfile
    environment:
      - CONSUMER_TYPE=inventory
    image: consumer-service 
    container_name: inventory1
    ports:
      - "7900:8080"
    depends_on:
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  inventory2:
    image: consumer-service
    container_name: inventory2
    environment:
      - CONSUMER_TYPE=inventory
    ports:
      - "7901:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  inventory3:
    image: consumer-service
    container_name: inventory3
    environment:
      - CONSUMER_TYPE=inventory
    ports:
      - "7902:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  inventory4:
    image: consumer-service  
    container_name: inventory4
    environment:
      - CONSUMER_TYPE=inventory
    ports:
      - "7903:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  inventory5:
    image: consumer-service  
    container_name: inventory5
    environment:
      - CONSUMER_TYPE=inventory
    ports:
      - "7904:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  skuAndProduct1:
    image: consumer-service
    environment:
    - CONSUMER_TYPE=skuAndProduct
    container_name: skuAndProduct1
    ports:
      - "7905:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  skuAndProduct2:
    image: consumer-service  
    container_name: skuAndProduct2
    environment:
    - CONSUMER_TYPE=skuAndProduct
    ports:
      - "7906:8080"
    depends_on:
      - inventory1
      - postgres
      - kafka1 
      - kafka2 
      - kafka3
    restart: on-failure

  kafka1:
    image: confluentinc/cp-kafka
    container_name: kafka1
    hostname: kafka1
    ports:
      - "${KAFKA1_PORT}:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka1:29092,CONTROLLER://kafka1:29093,EXTERNAL://0.0.0.0:${KAFKA1_PORT}'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:29092,EXTERNAL://localhost:${KAFKA1_PORT}'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka2:
    image: confluentinc/cp-kafka
    container_name: kafka2
    hostname: kafka2
    ports:
      - "${KAFKA2_PORT}:9093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka2:29092,CONTROLLER://kafka2:29093,EXTERNAL://0.0.0.0:${KAFKA2_PORT}'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:29092,EXTERNAL://localhost:${KAFKA2_PORT}'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  kafka3:
    image: confluentinc/cp-kafka
    container_name: kafka3
    hostname: kafka3
    ports:
      - "${KAFKA3_PORT}:9094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://kafka3:29092,CONTROLLER://kafka3:29093,EXTERNAL://0.0.0.0:${KAFKA3_PORT}'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka3:29092,EXTERNAL://localhost:${KAFKA3_PORT}'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:29093,2@kafka2:29093,3@kafka3:29093'
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      CLUSTER_ID: 'ciWo7IWazngRchmPES6q5A=='
      KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'

  schema-registry:
    image: confluentinc/cp-schema-registry
    container_name: schema-registry
    hostname: schema-registry
    ports:
      - "${SCHEMA_REGISTRY_PORT}:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka1:29092,kafka2:29092,kafka3:29092'
      SCHEMA_REGISTRY_LISTENERS: 'http://0.0.0.0:${SCHEMA_REGISTRY_PORT}'
    depends_on:
      - kafka1
      - kafka2
      - kafka3
volumes:
  db-data: